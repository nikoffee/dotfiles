export DEFAULT_USER="greg"
#ZSH_THEME="agnoster"
ZSH_THEME="powerlevel9k/powerlevel9k"

########################
## POWERLEVEL9K configuration
########################

POWERLEVEL9K_CONTEXT_TEMPLATE='%n'
POWERLEVEL9K_CONTEXT_DEFAULT_FOREGROUND='white'

POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status time background_jobs)

POWERLEVEL9K_SHORTEN_DIR_LENGTH=2

POWERLEVEL9K_TIME_FORMAT="%D{\uf017 %H:%M \uf073 %d/%m/%y}"
POWERLEVEL9K_TIME_BACKGROUND='white'

#########################
# Finished
#########################

# 10 second wait before delete everything.
setopt RM_STAR_WAIT

COMPLETION_WAITING_DOTS="true"

export ZSH=$HOME/.oh-my-zsh
source $ZSH/oh-my-zsh.sh
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/opt/libxml2/lib/pkgconfig

plugins=(brew colorize cp history sudo web-search pip zsh-syntax-highlighting forklift osx python rsync screen tmux gnu-utils colored-man-pages mosh zsh-autosuggestions git powerline)

if [[ -f /opt/dev/dev.sh ]] && [[ $- == *i* ]]; then
  source /opt/dev/dev.sh
fi

ssh-add -A

export GREP_OPTIONS='--color=auto'
export EDITOR="nvim"
export GIT_EDITOR="nvim"

if [ -f "$HOME/.bashrc" ]; then
  source "$HOME/.bashrc"
fi

if [ -f "$HOME/.profile" ]; then
  source "$HOME/.profile"
fi

export SHOPIFY_HOME=$HOME/src/github.com/Shopify

if which ruby >/dev/null && which gem >/dev/null; then
    PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
fi

export PATH="$PATH:$HOME/.cargo/bin"
export PATH="/usr/local/bin:$PATH"
export PATH="/usr/local/opt/mysql-client/bin:/usr/local/opt/mysql@5.7/bin:/usr/local/opt/mysql/bin:$PATH"
export DYLD_LIBRARY_PATH="/usr/local/opt/mysql-client/lib:$DYLD_LIBRARY_PATH"
ZSH_THEME=powerlevel9k/powerlevel9k

#export PYTHONPATH="/usr/local/lib/python3.7/site-packages:$PYTHONPATH"
export PATH="/usr/local/opt/python/libexec/bin:$PATH"

alias pip="pip3"
# pip zsh completion start
function _pip_completion {
  local words cword
  read -Ac words
  read -cn cword
  reply=( $( COMP_WORDS="$words[*]" \
             COMP_CWORD=$(( cword-1 )) \
             PIP_AUTO_COMPLETE=1 $words[1] ) )
}
compctl -K _pip_completion pip3
# pip zsh completion end

# kubectl autocomplete
if [ $commands[kubectl] ]; then
  source <(kubectl completion zsh)
fi

#Neovim true color support
export NVIM_TUI_ENABLE_TRUE_COLOR=1


############################
#######################
###################
#
# ------ Functions  & Aliases -------
#
###################
######################
############################

brewit() {
  echo -e "\e[93mNow Updating brew..\e[0m"
  brew update
  echo -e "\e[93mNow Upgrading brew..\e[0m"
  brew upgrade
  brew update
  echo -e "\e[92mSuccess!\e[0m"
  echo -e "\e[93mNow a visit from the Doctor!\e[0m"
  brew doctor
  echo -e "\e[93mCleaning up brew\e[0m"
  brew cleanup
  echo -e "\e[92mSuccess!\e[0m"
  echo -e "\e[93mNow Upgrading oh-my-zsh!\e[0m"
  upgrade_oh_my_zsh
  echo -e "\e[92mSuccess!\e[0m"
  echo -e "\e[93mNow Upgrading pip & pip3 packages\e[0m"
  if [ hash pip3 2>/dev/null ]
  then
    pip3 list --outdated | cut -d' ' -f1 | xargs pip3 install --upgrade
  fi

  if [ hash pip2 2>/dev/null ]
  then
    pip2 list --outdated | cut -d' ' -f1 | xargs pip2 install --upgrade
  fi
  echo -e "\e[92mSuccess!\e[0m"
}

git_clean_merged_branches() {
  echo -e "\e[93mNow cleaning all local git branches that have been merged into master on the remote.. \e[0m"
  git branch --merged master --no-color | grep -v '^* master$' | xargs -n1 git branch -d
}

alias be="bundle exec"
alias ll="ls -AahloPS"

# Networking Proxy Commands
burp_proxy_on() {
  networksetup -setwebproxystate 'Wi-Fi' on
  networksetup -setsecurewebproxystate 'Wi-Fi' on
}

burp_proxy_off() {
  networksetup -setwebproxystate 'Wi-Fi' off
  networksetup -setsecurewebproxystate 'Wi-Fi' off
}

dns_clear() {
  networksetup -setdnsservers 'Wi-Fi' nil
}

dns_google() {
  networksetup -setdnsservers 'Wi-Fi' 8.8.8.8 8.8.4.4
}

reset_touchbar() {
killall ControlStrip
}
